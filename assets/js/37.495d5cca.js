(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{372:function(t,s,e){"use strict";e.r(s);var a=e(4),n=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("今天工作上遇到一个问题，说是需要将多次 commit 合并成一个 commit，好严格噢，但是其实这个也很简单。")]),t._v(" "),s("p",[t._v("最开始我以为要使用 git reset，可能也行，但是不太友好，需要重新 commit。"),s("br"),t._v("\n之后我以为要使用 git chery-pick，但是他会生成一个新的合并记录，也不符合这个严格的要求。"),s("br"),t._v("\n后来发现，原来是要使用 git rebase 才行。")]),t._v(" "),s("p",[t._v("git reabse 不仅可以将多个 commit 合并成 1 个，还可以把自己移动到某一个 commit 的前面，这种移动等同于 merge，如有冲突也需要解决。")]),t._v(" "),s("h2",{attrs:{id:"git-rebase-将多个-commit-合并成-1-个"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-将多个-commit-合并成-1-个"}},[t._v("#")]),t._v(" git rebase 将多个 commit 合并成 1 个")]),t._v(" "),s("p",[s("code",[t._v("git reabse -i HEAD~4")]),t._v("，4 表示从当前的 commit 开始，往前合并 4 条（自己也算一条）。"),s("br"),t._v("\n这时候会出现一个交互式的编辑界面，需要你懂些 vi/vim 的基本命令，比如 "),s("code",[t._v("i")]),t._v("、"),s("code",[t._v("esc")]),t._v("、"),s("code",[t._v(":")]),t._v("、"),s("code",[t._v("wq")]),t._v("。"),s("br"),t._v("\n编辑界面出现后，会出现多条 commit 列表，下面会有英文说明注释的，但是不那么好懂。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick xxx111xxx11xx  commit-message-001\npick xxx222xxx22xx  commit-message-002\npick xxx333xxx33xx  commit-message-003\npick xxx444xxx44xx  commit-message-004\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pick：保留该commit（缩写:p）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reword：保留该commit，但我需要修改该commit的注释（缩写:r）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# squash：将该commit和前一个commit合并（缩写:s）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# exec：执行shell命令（缩写:x）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# drop：我要丢弃该commit（缩写:d）")]),t._v("\n")])])]),s("p",[t._v("从上述的内容可知，我想要合并成 1 个，我的做法是这样的也就是，让后面三个和第一个合并。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pick xxx111xxx11xx  commit-message-001\ns xxx222xxx22xx  commit-message-002\ns xxx333xxx33xx  commit-message-003\ns xxx444xxx44xx  commit-message-004\n")])])]),s("p",[t._v("上述的保存之后，之后会出现以下的内容。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xxx111xxx11xx")]),t._v("\ncommit-message-001\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xxx222xxx22xx")]),t._v("\ncommit-message-002\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xxx333xxx33xx")]),t._v("\ncommit-message-003\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xxx444xxx44xx")]),t._v("\ncommit-message-004\n")])])]),s("p",[t._v("你只需要删除其它的 commit message，只保留你要留下的那一个 commit message 即可。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# xxx111xxx11xx")]),t._v("\ncommit-message-001\n")])])]),s("p",[t._v("这个时候，你再 git push -f 一下，就能把你之前那几次的 commit 变成一个了。")]),t._v(" "),s("p",[t._v("注意："),s("br"),t._v("\n如果你前面几次的记录有一个或者几个都在远程分支上，那么可能就需要特殊处理一下。比如我是把当前最新的 commit 提交上去，然后就 ok 了，而在之前我怎么 rebase 也不太行。\n如果这个过程中出错了，你可以使用 git rebase --abort")]),t._v(" "),s("h2",{attrs:{id:"git-rebase-将当前-commit-移动到其它的-commit-上去"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-将当前-commit-移动到其它的-commit-上去"}},[t._v("#")]),t._v(" git rebase 将当前 commit 移动到其它的 commit 上去")]),t._v(" "),s("p",[t._v("这个操作是在你拉取一个分支 develop 后，你在这个分支上又创建了一个新分支，然后你在这个新分支上开发了两周，而原来那个 develop 分支已经提交了几十个 commit 了，这个时候默认都是 merge 一下，但是这会生成一次 merge 记录。"),s("br"),t._v("\n其实可以通过 rebase 将你当前分支移动到 develop 分支的上面去，不会产生一次 merge 记录，非常的优雅，但是还是得解决冲突噢。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切到develop分支，然后创建自己的分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" feat/m2\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat(xxx): message-001"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到develop分支，然后拉取最新的记录，再切换回自己的分支，开始将自己的分支移动到最新的记录上，然后解决冲突，重新add、rebase continue，最后移动成功")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feat/m2\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase develop\n操作：解决所有冲突\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--continue")]),t._v("\n所有冲突解决完毕，那就移动成功。\n")])])]),s("h2",{attrs:{id:"结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),s("p",[t._v("这个操作很久很久之前做过，但是和 git chery-pick 一样没咋用就给忘记了，现在把他捡起来，所以做一下记录。")]),t._v(" "),s("p",[t._v("我是看了半篇这个"),s("a",{attrs:{href:"https://www.jianshu.com/p/4a8f4af4e803",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章"),s("OutboundLink")],1),t._v("后才回忆想起来。")])])}),[],!1,null,null,null);s.default=n.exports}}]);